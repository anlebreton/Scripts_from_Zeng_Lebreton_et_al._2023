#install.packages("ggalluvial")
library(ggalluvial)
#
# Fungi_ratio <- Fungi_TPM %>%
#   dplyr::select(-starts_with("NR_"),-starts_with("Myc"),-ID,-ctg_length, -sum_contig_count) %>%
#   mutate(PD_Order = case_when(PD_Order %in% topPhyla ~ PD_Order, TRUE ~ "Others")) %>%
#   filter(PD_Order != "Others") %>%
#   group_by(PD_Genus,PD_Family, PD_Order, PD_Phylum) %>% summarise_if(is.numeric, sum) %>%
#   pivot_longer(cols=-c(PD_Genus, PD_Family, PD_Order, PD_Phylum), names_to="samples", values_to="tpm_counts") %>%
#   left_join(treatment_metadata)
#
# Fungi_ratio2 <- Fungi_ratio %>% group_by(tree_species) %>%
#   mutate(perc_tpm=(tpm_counts/sum(tpm_counts))*100) %>%
#   group_by(PD_Order, tree_species) %>%
#   summarise_if(is.numeric, sum) %>%
#   select(PD_Order, tree_species,perc_tpm )
is_alluvia_form(as.data.frame(res2), axes = 1:2, silent = TRUE)
myColorTree = GetMyColor(res2$Tree_species)
myColorOrder = GetMyColor2(res2$Order)
myColorPhylum =  GetMyColor2(res2$Phylum)
myColorID = GetMyColor2(res2$ID)
res2$Phylum <- factor(res2$Phylum, levels =names(myColorPhylum ))
res2$Order <- factor(res2$Order, levels =names(myColorOrder) )
res2$ID <- factor(res2$ID, levels =names(myColorID) )
ggplot(as.data.frame(res2),
aes(y = median, axis1=ID, axis2 = Tree_species)) +
geom_alluvium(aes(fill = Tree_species), width = 1/12) +
geom_stratum(width = 1/12, color = "grey") +
scale_fill_manual(values = myColorTree) +
#scale_color_manual(values = myColorFull) +
geom_text(
aes(
label = after_stat(stratum),
hjust=1,
#hjust = ifelse(Condition == "Condition1", 1, 0),
#x = as.numeric(factor(Condition)) + .075 * ifelse(Condition == "Condition1", -1, 1),
color = "grey"
),
stat = "stratum", fontface = "bold",
size = 3
)+
#geom_label(stat = "stratum", aes(label = after_stat(stratum)),ifelse(Condition == "Condition1", 1, 0)) +
scale_x_discrete(limits = c("OTU", "Tree species"), expand = c(0.5, 0.5)) +
#ggtitle("UC Berkeley admissions and rejections, by sex and department")+
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank()
) +
theme(legend.position = "none") +
ylab(NULL)
is_alluvia_form(as.data.frame(res2), axes = 1:2, silent = TRUE)
myColorTree = GetMyColor(res2$Tree_species)
myColorOrder = GetMyColor2(res2$Order)
myColorPhylum =  GetMyColor2(res2$Phylum)
res2$Phylum <- factor(res2$Phylum, levels =names(myColorPhylum ))
res2$Order <- factor(res2$Order, levels =names(myColorOrder) )
res2$ID <- factor(res2$ID, levels =names(myColorID) )
ggplot(as.data.frame(res2),
aes(y = median, axis1=ID, axis2 = Tree_species)) +
geom_alluvium(aes(fill = Tree_species), width = 1/12) +
geom_stratum(width = 1/12, color = "grey") +
scale_fill_manual(values = myColorTree) +
#scale_color_manual(values = myColorFull) +
geom_text(
aes(
label = after_stat(stratum),
hjust=1,
#hjust = ifelse(Condition == "Condition1", 1, 0),
#x = as.numeric(factor(Condition)) + .075 * ifelse(Condition == "Condition1", -1, 1),
color = "grey"
),
stat = "stratum", fontface = "bold",
size = 3
)+
#geom_label(stat = "stratum", aes(label = after_stat(stratum)),ifelse(Condition == "Condition1", 1, 0)) +
scale_x_discrete(limits = c("OTU", "Tree species"), expand = c(0.5, 0.5)) +
#ggtitle("UC Berkeley admissions and rejections, by sex and department")+
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank()
) +
theme(legend.position = "none") +
ylab(NULL)
res <- res_test_FC %>% filter(Tree_species < 10e-5) %>% filter(max > 18)
res2 <- abundance %>% filter(ID %in% res$ID) %>%
select(c("ID", starts_with(amplicon),"Phylum", "Order")) %>%
pivot_longer(cols=-c("ID","Phylum","Order"), names_to="Sample", values_to="count") %>%
left_join(samples_metadata ) %>%
group_by(ID, Tree_species, Phylum,Order ) %>%
summarise(median=median(count))
tmp <- abundance %>% filter(ID %in% res$ID) %>% select("ID","Phylum","Order")
#install.packages("ggalluvial")
library(ggalluvial)
is_alluvia_form(as.data.frame(res2), axes = 1:2, silent = TRUE)
myColorTree = GetMyColor(res2$Tree_species)
myColorOrder = GetMyColor2(res2$Order)
myColorPhylum =  GetMyColor2(res2$Phylum)
res2$Phylum <- factor(res2$Phylum, levels =names(myColorPhylum ))
res2$Order <- factor(res2$Order, levels =names(myColorOrder) )
ggplot(as.data.frame(res2),
aes(y = median, axis1=ID, axis2 = Tree_species)) +
geom_alluvium(aes(fill = Tree_species), width = 1/12) +
geom_stratum(width = 1/12, color = "grey") +
scale_fill_manual(values = myColorTree) +
#scale_color_manual(values = myColorFull) +
geom_text(
aes(
label = after_stat(stratum),
hjust=1,
#hjust = ifelse(Condition == "Condition1", 1, 0),
#x = as.numeric(factor(Condition)) + .075 * ifelse(Condition == "Condition1", -1, 1),
color = "grey"
),
stat = "stratum", fontface = "bold",
size = 3
)+
#geom_label(stat = "stratum", aes(label = after_stat(stratum)),ifelse(Condition == "Condition1", 1, 0)) +
scale_x_discrete(limits = c("OTU", "Tree species"), expand = c(0.5, 0.5)) +
#ggtitle("UC Berkeley admissions and rejections, by sex and department")+
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank()
) +
theme(legend.position = "none") +
ylab(NULL)
#library("readr")
library("plyr");library("dplyr");library("ggplot2");library("tidyr");library("tidyverse")
library("RColorBrewer");library("ggpubr");library("vegan")
GetMyColor2 <- function(colDF){
mycolorsFile <- read.csv("../0_Metadata/mycolorFile_v2.txt",sep="\t")
mycolors <- mycolorsFile %>% filter(Name %in% colDF)
mycolors <- mycolors %>% arrange(myLevel)
mycolor <- mycolors$color
names(mycolor) <- mycolors$Name
#colDF <- factor(colDF, levels=mycolors$Name
return(mycolor)
}
GetMyColor <- function(colDF){
mycolorsFile <- read.csv("../../mycolorFile.txt",sep="\t")
mycolors <- mycolorsFile %>% filter(Name %in% colDF)
mycolors <- mycolors %>% arrange(myLevel)
mycolor <- mycolors$color
names(mycolor) <- mycolors$Name
#colDF <- factor(colDF, levels=mycolors$Name
return(mycolor)
}
abundance <- read.csv("../1_data/no_normalisation_ITS2_abundance_addCols.tsv", sep="\t" )
#abundance <- read.csv("../1_data/Yulong_ITS2_normalised_abundance_addCols.tsv", sep="\t" )
abundance$ID <- paste(abundance$observation_name, abundance$Species, sep="_")
#abundance$ID <- paste(abundance$observation_name, abundance$Order, sep="_")
abundance$ID <- str_replace_all(abundance$ID , "-", ".")
abundance$ID <- str_replace_all(abundance$ID , " ", ".")
abundance$ID <- str_replace_all(abundance$ID , "[(]", ".")
abundance$ID <- str_replace_all(abundance$ID , "[)]", ".")
samples_metadata <- read.table("../0_Metadata/Yulong_sampling_ITS2_metadata.txt")
samples_metadata$Sample <- rownames(samples_metadata)
samples_metadata$Sample <- str_replace_all(samples_metadata$Sample , "-", ".")
ecology <-read.csv(file="../../ecology_fungaltrait_genus.txt", sep = "\t")
amplicon="ITS2"
df <-  abundance #%>% filter(observation_sum >50)
#df <-  abundance %>% filter(observation_name %in% DE$observation_name)
#df$ID <- paste(df$observation_name, df$Species, sep="_")
#df$ID <- str_replace_all(df$ID , "-", ".")
df2 <- df %>% select(c("ID", starts_with(amplicon))) #%>%
#pivot_longer(cols=-c("ID"), names_to="samples", values_to="count") %>%
#group_by("ID","samples") %>% summarise("counts"=sum(count))
tmp <- df2
df2$ID <- NULL
rownames(df2) <- tmp$ID
df2 <- as.data.frame(t(df2))
df2$Sample <- rownames(df2)
df2 <- df2 %>% left_join(samples_metadata )
#df2$layer_tree <- paste( df2$layer,df2$tree_species, sep="_")
#colnames(df)
measures <- df2 %>% select(starts_with("Cluster"))
measures <- unique(colnames(measures))
measures<- str_replace_all(measures , "-", ".")
variables <- c("Layer", "Tree_species","Season")
v1 <- c("Tree_species","Season")
v2 <- c("Layer")
DF <- data.frame()
res_test <- data.frame(matrix(ncol = length(variables) , nrow = length(measures) ))
colnames(res_test) <- variables
rownames(res_test) <- measures
for (v in v1){
for (m in measures){
f <- paste(m," ~ ", v)
kruskal_res <- kruskal.test(as.formula(f), data=df2 )
#kruskal_res<- kruskal.test(AA3 ~ tree_species, data=df2 )
DF[m,v]<- kruskal_res$p.value
}
res_test[,v] <- p.adjust(DF[,v], method = "fdr")
}
for (v in v2){
for (m in measures){
f <- paste(m," ~ ", v)
if(f=="Cluster  ~  Layer") next
#print(f)
wilcox.test <- wilcox.test(as.formula(f), data=df2 )
#kruskal_res<- kruskal.test(AA3 ~ tree_species, data=df2 )
DF[m,v]<- wilcox.test$p.value
}
res_test[,v] <- p.adjust(DF[,v], method = "fdr")
}
rm(DF, m,v,v1,v2,f,kruskal_res,wilcox.test,df,tmp)
res_test$ID <- rownames(res_test)
res_test_filtered <- res_test %>% filter(ID != "Cluster") %>%
filter_at(vars(all_of(variables)), any_vars(. < 0.00001 ))
#######################################@
variablesDetails1 <- c("Quercus","Abies","Picea")
variablesDetails2 <- c(unique(samples_metadata$Season))
res_test_FC <- abundance %>% #filter(observation_sum >50) %>%
select(c("ID", starts_with(amplicon))) %>%
pivot_longer(cols=-c("ID"), names_to="Sample", values_to="count") %>%
filter(ID %in% res_test_filtered$ID) %>%
left_join(samples_metadata ) %>% ungroup()%>%
group_by(ID, Tree_species) %>%
summarise(median=median(count),.groups = 'keep') %>% ungroup()%>%
group_by(ID) %>%
summarise(max=max(median),min=min(median), highestFC=max/(min+1)) %>%
left_join(res_test_filtered)
#df <- res_test_FC %>% filter(highestFC > 1.5)
####### Tree_species ######
res <- res_test_FC %>% filter(Tree_species < 10e-5) %>% filter(max > 18)
res2 <- abundance %>% filter(ID %in% res$ID) %>%
select(c("ID", starts_with(amplicon),"Phylum", "Order")) %>%
pivot_longer(cols=-c("ID","Phylum","Order"), names_to="Sample", values_to="count") %>%
left_join(samples_metadata ) %>%
group_by(ID, Tree_species, Phylum,Order ) %>%
summarise(median=median(count))
tmp <- abundance %>% filter(ID %in% res$ID) %>% select("ID","Phylum","Order")
#write.table(tmp, file="tmp.tsv", sep="\t", row.names = F)
#install.packages("ggalluvial")
library(ggalluvial)
#
# Fungi_ratio <- Fungi_TPM %>%
#   dplyr::select(-starts_with("NR_"),-starts_with("Myc"),-ID,-ctg_length, -sum_contig_count) %>%
#   mutate(PD_Order = case_when(PD_Order %in% topPhyla ~ PD_Order, TRUE ~ "Others")) %>%
#   filter(PD_Order != "Others") %>%
#   group_by(PD_Genus,PD_Family, PD_Order, PD_Phylum) %>% summarise_if(is.numeric, sum) %>%
#   pivot_longer(cols=-c(PD_Genus, PD_Family, PD_Order, PD_Phylum), names_to="samples", values_to="tpm_counts") %>%
#   left_join(treatment_metadata)
#
# Fungi_ratio2 <- Fungi_ratio %>% group_by(tree_species) %>%
#   mutate(perc_tpm=(tpm_counts/sum(tpm_counts))*100) %>%
#   group_by(PD_Order, tree_species) %>%
#   summarise_if(is.numeric, sum) %>%
#   select(PD_Order, tree_species,perc_tpm )
is_alluvia_form(as.data.frame(res2), axes = 1:2, silent = TRUE)
myColorTree = GetMyColor(res2$Tree_species)
myColorOrder = GetMyColor2(res2$Order)
myColorPhylum =  GetMyColor2(res2$Phylum)
#myColorID = GetMyColor2(res2$ID)
res2$Phylum <- factor(res2$Phylum, levels =names(myColorPhylum ))
res2$Order <- factor(res2$Order, levels =names(myColorOrder) )
#res2$ID <- factor(res2$ID, levels =names(myColorID) )
ggplot(as.data.frame(res2),
aes(y = median, axis1=ID, axis2 = Tree_species)) +
geom_alluvium(aes(fill = Tree_species), width = 1/12) +
geom_stratum(width = 1/12, color = "grey") +
scale_fill_manual(values = myColorTree) +
#scale_color_manual(values = myColorFull) +
geom_text(
aes(
label = after_stat(stratum),
hjust=1,
#hjust = ifelse(Condition == "Condition1", 1, 0),
#x = as.numeric(factor(Condition)) + .075 * ifelse(Condition == "Condition1", -1, 1),
color = "grey"
),
stat = "stratum", fontface = "bold",
size = 3
)+
#geom_label(stat = "stratum", aes(label = after_stat(stratum)),ifelse(Condition == "Condition1", 1, 0)) +
scale_x_discrete(limits = c("OTU", "Tree species"), expand = c(0.5, 0.5)) +
#ggtitle("UC Berkeley admissions and rejections, by sex and department")+
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank()
) +
theme(legend.position = "none") +
ylab(NULL)
res <- res_test_FC %>% filter(Tree_species < 10e-5) %>% filter(max > 18)
View(res)
View(res)
res <- res_test_FC %>% filter(Tree_species < 10e-5) %>% arrange(desc(max)) %>%
slice_head(n=20)
res2 <- abundance %>% filter(ID %in% res$ID) %>%
select(c("ID", starts_with(amplicon),"Phylum", "Order")) %>%
pivot_longer(cols=-c("ID","Phylum","Order"), names_to="Sample", values_to="count") %>%
left_join(samples_metadata ) %>%
group_by(ID, Tree_species, Phylum,Order ) %>%
summarise(median=median(count))
tmp <- abundance %>% filter(ID %in% res$ID) %>% select("ID","Phylum","Order")
#install.packages("ggalluvial")
library(ggalluvial)
is_alluvia_form(as.data.frame(res2), axes = 1:2, silent = TRUE)
myColorTree = GetMyColor(res2$Tree_species)
myColorOrder = GetMyColor2(res2$Order)
myColorPhylum =  GetMyColor2(res2$Phylum)
res2$Phylum <- factor(res2$Phylum, levels =names(myColorPhylum ))
res2$Order <- factor(res2$Order, levels =names(myColorOrder) )
ggplot(as.data.frame(res2),
aes(y = median, axis1=ID, axis2 = Tree_species)) +
geom_alluvium(aes(fill = Tree_species), width = 1/12) +
geom_stratum(width = 1/12, color = "grey") +
scale_fill_manual(values = myColorTree) +
#scale_color_manual(values = myColorFull) +
geom_text(
aes(
label = after_stat(stratum),
hjust=1,
#hjust = ifelse(Condition == "Condition1", 1, 0),
#x = as.numeric(factor(Condition)) + .075 * ifelse(Condition == "Condition1", -1, 1),
color = "grey"
),
stat = "stratum", fontface = "bold",
size = 3
)+
#geom_label(stat = "stratum", aes(label = after_stat(stratum)),ifelse(Condition == "Condition1", 1, 0)) +
scale_x_discrete(limits = c("OTU", "Tree species"), expand = c(0.5, 0.5)) +
#ggtitle("UC Berkeley admissions and rejections, by sex and department")+
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank()
) +
theme(legend.position = "none") +
ylab(NULL)
library(ggplot2)
library(phyloseq)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggsignif)
setwd("/Users/annie/Documents/Projets/Yulong/metabarcoding/Yulong_R_scripts")
meta <- read.csv(file="/Volumes/Hungry/Yulong/metabarcoding/0_Metadata/Yulong_sampling_ITS2_metadata.txt","sep"="\t")
names(meta)[names(meta) == 'X'] <- 'sample'
meta$sample <- gsub("-", ".", meta$sample)
## Setting variables
## The Phyloseq object (format rdata)
phylose <- load("/Volumes/Hungry/Yulong/metabarcoding/1_data/Yulong_ITS2.rdata")
## The experiment variable that you want to analyse
varExp <- "Tree_species"
## "The alpha diversity indices to compute. Multiple indice may be indicated by separating them by a comma.
## Available indices are : Observed, Chao1, Shannon, InvSimpson, Simpson, ACE, Fisher
measures <- "InvSimpson,Observed,Shannon,"
## Create input and parameters dataframe
params <- data.frame( "phyloseq" = phylose, "measures" = measures, "varExp" = varExp)
## Convert measures to list
measures <- as.list(strsplit(params$measures, ",")[[1]])
## Compute numeric values of alpha diversity indices
alpha.diversity <- estimate_richness(data, measures = measures)
alpha.diversity$sample <- row.names(alpha.diversity)
df <- gather(alpha.diversity, "indice", "value", -"sample")
df <- merge(df, meta)
df <- df %>% mutate(Layer=case_when(Layer != "OS" ~ Layer, TRUE ~ "OS: 0 - 5cm"))
df <- df %>% mutate(Layer=case_when(Layer != "OM" ~ Layer, TRUE ~ "OM: 5 - 25cm"))
df$Layer <- factor(df$Layer, levels=c("OS: 0 - 5cm","OM: 5 - 25cm" ))
df$Tree_species <- factor(df$Tree_species, levels=c("Abies","Picea","Quercus"))
df$indice <- factor(df$indice, levels=c("Observed","Shannon","InvSimpson"))
df$Season <- factor(df$Season, levels=c("2019_wet", "2020_dry", "2020_wet"))
#####
df <- df %>% filter(indice == "Observed")
# plot_max = 5000
# red = 400
# red2 = 150
# plot_min = 2000
plot_max = 800
plot_min = 100
red = 100
red2=50
myColor=c("Abies"="#ffb3b3","Picea"="#c6ecd9","Quercus"="#66ccff")
myColor=c("Abies"="red","Picea"="forestGreen","Quercus"="blue")
myColor=c("Abies"="#d64933","Picea"="#3fb52f","Quercus"="#5a92ed")
p1 <- ggplot(data=df, aes(x=Tree_species, y=value) ) +
#geom_col() +
ggtitle("Tree species")+
ylim(plot_min, plot_max)+
geom_boxplot(outlier.shape = NA, aes( colour= Tree_species))+
geom_point(alpha=0.7, size=0.01, aes( colour= Tree_species))+
#ggtitle("Tree species")+
theme_bw()+
#geom_jitter(cex=0.2)+
#facet_wrap(~ indice, scales = "free") +
#scale_fill_manual(values=c("#999999",rev(c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7","springgreen4","mediumorchid4","cadetblue","lightpink","khaki","turquoise1","black","steelblue")))) +
theme(axis.text.x=element_text(angle = 55,hjust=1))+
geom_signif(
comparisons = list(c("Abies", "Picea"), c( "Quercus", "Picea"),
c("Abies", "Quercus")),
step_increase = 0.05,
y_position = plot_max - red,
vjust = 1.5,
tip_length =0,
map_signif_level = TRUE,
size = 0.2,
test = "wilcox.test"
)+
scale_color_manual(values=myColor)+
scale_shape_manual(values=c(1,1,1))+
theme(plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
anova_data <- cbind(sample_data(data), alpha.diversity)
anova_data$Depth <- sample_sums(data)
p1
anova_data <- cbind(sample_data(data), alpha.diversity)
anova_data$Depth <- sample_sums(data)
variables <- paste(sep=" + ", "Depth", params$varExp )
## Perform ANOVA on observed richness, which effects are significant
for (m in measures){
f <- paste(m," ~ ", variables)
cat(sep = "", "###############################################################\n#Perform ANOVA on ",m,", which effects are significant\nanova.",m," <-aov( ",f,", anova_data)\nsummary(anova.",m,")\n")
anova_res <- aov( as.formula(f), anova_data)
res <- summary(anova_res)
print(res)
cat("\n\n")
}
myColor=c("OS: 0 - 5cm"="#6B3A2C","OM: 5 - 25cm"="#dbcb81")
p2 <- ggplot(data=df, aes(x=Layer, y=value) ) +
#geom_col() +
ggtitle("Layer")+
ylim(plot_min, plot_max)+
geom_boxplot(outlier.shape = NA, aes( colour=Layer))+
geom_point(alpha=0.7, size=0.01, aes( colour=Layer))+
theme_bw()+
#geom_jitter(cex=0.2)+
#facet_wrap(~ indice, scales = "free") +
#scale_fill_manual(values=c("#999999",rev(c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7","springgreen4","mediumorchid4","cadetblue","lightpink","khaki","turquoise1","black","steelblue")))) +
theme(axis.text.x=element_text(angle = 55,hjust=1))+
geom_signif(
comparisons = list(c("OS: 0 - 5cm","OM: 5 - 25cm")),
step_increase = 0.05,
y_position = plot_max - red2,
vjust = 1.5,
tip_length =0,
map_signif_level = TRUE,
size = 0.2,
test = "wilcox.test"
)+
scale_color_manual(values=myColor)+
scale_shape_manual(values=c(1,1,1))+
theme(plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
myColor=c("2019_wet"="#35978f", "2020_dry"="#dfc27d","2020_wet"="navyblue")
p3 <- ggplot(data=df, aes(x=Season, y=value) ) +
ggtitle("Season")+
ylim(plot_min, plot_max)+
#geom_col() +
geom_boxplot(outlier.shape = NA, aes( colour=Season))+
geom_point(alpha=0.7, size=0.01, aes( colour=Season))+
theme_bw()+
#geom_jitter(cex=0.2)+
#facet_wrap(~ indice, scales = "free") +
#scale_fill_manual(values=c("#999999",rev(c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7","springgreen4","mediumorchid4","cadetblue","lightpink","khaki","turquoise1","black","steelblue")))) +
theme(axis.text.x=element_text(angle = 55,hjust=1))+
geom_signif(
comparisons = list(c("2019_wet", "2020_dry"),c("2019_wet", "2020_wet"),c("2020_dry", "2020_wet")),
step_increase = 0.05,
tip_length =0,
vjust = 1.5,
map_signif_level = TRUE,
y_position = plot_max - red,
size = 0.2,
test = "wilcox.test"
)+
scale_color_manual(values=myColor)+
scale_shape_manual(values=c(1,1,1))+
theme(plot.title = element_text(hjust = 0.5), axis.title.x=element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
library(ggplotify)
library(ggpubr)
ggarrange(p1, p3, p2, #+ rremove("x.text"),
#labels = c("A", "B", "C","D"),
align = "h",
ncol = 3, nrow = 1,
common.legend = FALSE#,
#legend=NA
)
## Perform ANOVA on observed richness, which effects are significant
for (m in measures){
f <- paste(m," ~ ", variables)
cat(sep = "", "###############################################################\n#Perform ANOVA on ",m,", which effects are significant\nanova.",m," <-aov( ",f,", anova_data)\nsummary(anova.",m,")\n")
anova_res <- aov( as.formula(f), anova_data)
res <- summary(anova_res)
print(res)
cat("\n\n")
}
